generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String   @unique
  role          Role
  organizationDetails OrganizationDetails?
  studentDetails      StudentDetails?
  fundraisers   Fundraiser[]  @relation("UserFundraisers")
  donations     Donation[]    @relation("UserDonations")
  scholarships  Scholarship[] @relation("UserScholarships")
  applications  Application[] @relation("UserApplications")
  disbursements Disbursement[] @relation("UserDisbursements")
  createdAt     DateTime @default(now())
}

enum Role {
  STUDENT
  ORGANIZATION
  DONOR
  ADMIN
}

model OrganizationDetails {
  id            String @id @default(uuid())
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id])
  documentURL   String 
  verified      Boolean @default(false)
}

model StudentDetails {
  id            String @id @default(uuid())
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id])
  fatherName    String
  motherName    String
  tenthResult   String 
  twelfthResult String 
  incomeCert    String 
  verified      Boolean @default(false)
}


model Fundraiser {
  id           String   @id @default(uuid())
  title        String
  description  String
  goalAmount   Float
  raisedAmount Float    @default(0)
  deadline     DateTime
  status       FundraiserStatus @default(PENDING)
  organizationId String
  organization  User   @relation("UserFundraisers", fields: [organizationId], references: [id])
  donations     Donation[]  @relation("FundraiserDonations")
  scholarships  Scholarship[] @relation("FundraiserScholarships")
  createdAt    DateTime @default(now())
}

enum FundraiserStatus {
  PENDING
  ACTIVE
  COMPLETED
}

model Donation {
  id           String   @id @default(uuid())
  donorId      String
  donor        User     @relation("UserDonations", fields: [donorId], references: [id])
  fundraiserId String
  fundraiser   Fundraiser @relation("FundraiserDonations", fields: [fundraiserId], references: [id])
  amount       Float
  createdAt    DateTime @default(now())
}

model Scholarship {
  id            String   @id @default(uuid())
  title         String
  description   String
  totalAmount   Float
  allocatedAmount Float @default(0)
  fundraiserId  String?
  fundraiser    Fundraiser? @relation("FundraiserScholarships", fields: [fundraiserId], references: [id])
  organizationId String
  organization  User @relation("UserScholarships", fields: [organizationId], references: [id])
  applications  Application[] @relation("ScholarshipApplications")
  disbursements Disbursement[] @relation("ScholarshipDisbursements")
  createdAt     DateTime @default(now())
}

model Application {
  id           String   @id @default(uuid())
  studentId    String
  student      User     @relation("UserApplications", fields: [studentId], references: [id])
  scholarshipId String
  scholarship  Scholarship @relation("ScholarshipApplications", fields: [scholarshipId], references: [id])
  status       ApplicationStatus @default(PENDING)
  createdAt    DateTime @default(now())
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Disbursement {
  id             String   @id @default(uuid())
  scholarshipId  String
  scholarship    Scholarship @relation("ScholarshipDisbursements", fields: [scholarshipId], references: [id])
  studentId      String
  student        User @relation("UserDisbursements", fields: [studentId], references: [id])
  amount         Float
  status         DisbursementStatus @default(PENDING)
  createdAt      DateTime @default(now())
}

enum DisbursementStatus {
  PENDING
  COMPLETED
  FAILED
}